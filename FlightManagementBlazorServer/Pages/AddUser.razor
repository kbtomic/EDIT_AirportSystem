@page "/register"
@using System.Text;
@inject UserService _userService;
@inject NavigationManager _navigationManager;
<h3>Register New User</h3>

<EditForm Model="@User" OnValidSubmit="@AddUserAsync">
    <div class="userFields">
        <label for="userName">Username</label>
        <InputText id="userName" @bind-Value="@User.Username" class="form-control"></InputText>

        <label for="email">Email</label>
        <InputText id="email" @bind-Value="@User.Email" class="form-control"></InputText>

        <label for="password">Password</label>
        <InputText type="password" placeholder="Input Password" id="password" @bind-Value="@User.Password" class="form-control"></InputText>

        <label for="role">Role</label>
        <InputText id="role" @bind-Value="@User.Role" class="form-control"></InputText>
    </div>
    <button type="submit" class="btn btn-success">
        <span class="oi oi-pencil"></span>
        Add User
    </button>
    <button type="button" class="btn btn-secondary" @onclick="Close">
        <span class="oi oi-media-skip-backward"></span>
        Close
    </button>
</EditForm>

<NotificationDialog @ref="NotificationDialog" Description="@ConcatenatedValidationErrors"></NotificationDialog>

@code {
    public User User { get; set; }
    public NotificationDialog NotificationDialog { get; set; }
    public List<ValidationError> ValidationErrors { get; set; }
    public String ConcatenatedValidationErrors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = new User();
    }

    private async Task AddUserAsync()
    {
        ValidationErrors = ValidateUser();
        if (ValidationErrors.Any())
        {
            ConcatenatedValidationErrors = GetConcatenatedValidationErrors(ValidationErrors);
            NotificationDialog.Show();
        }
        else
        {
            await _userService.AddUserAsync(User);
            Close();
        }
    }

    private List<ValidationError> ValidateUser()
    {
        var validationErrors = new List<ValidationError>();
        if (String.IsNullOrWhiteSpace(User.Username))
            validationErrors.Add(new ValidationError { Description = "Please insert username!" });

        if (String.IsNullOrWhiteSpace(User.Email))
            validationErrors.Add(new ValidationError { Description = "Please insert email!" });

        if (String.IsNullOrWhiteSpace(User.Password))
            validationErrors.Add(new ValidationError { Description = "Please insert Password!" });

        if (User.Role != "Admin" && User.Role != "CheckIn")
            validationErrors.Add(new ValidationError { Description = "Please insert valid role - Admin or CheckIn!" });

        return validationErrors;

    }

    private string GetConcatenatedValidationErrors(List<ValidationError> ValidationErrors)
    {
        StringBuilder message = new StringBuilder();
        foreach (var error in ValidationErrors)
        {
            if (message.Length == 0)
                message.Append(error.Description);
            else
                message.Append($"{Environment.NewLine} {error.Description}");

        }
        return message.ToString();
    }

    private void Close()
    {
        _navigationManager.NavigateTo("/FlightList");
    }
}
